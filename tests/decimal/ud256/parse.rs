use rstest::*;

use fastnum::{u256, U256, UD256};

use crate::decimal::common::parse::{test_impl, test_impl_unsigned};

test_impl!(u256, U256, UD256);
test_impl_unsigned!(u256, U256, UD256);

#[rstest(::trace)]
#[case("340282366920938463463374607431768211455", u256!(340282366920938463463374607431768211455), 0)]
#[case("34028236692093846346337460743176821145.5", u256!(340282366920938463463374607431768211455), -1)]
#[case("34028236692093846346337460743176821145.5e1000", u256!(340282366920938463463374607431768211455), 999)]
#[case("340282366920938463.463374607431768211455e-1000", u256!(340282366920938463463374607431768211455), -1021)]
#[case("115792089237316195423570985008687907853269984665640564039457584007913129639935", u256!(115792089237316195423570985008687907853269984665640564039457584007913129639935), 0)]
#[case("1157920892373161954235709850086.87907853269984665640564039457584007913129639935", u256!(115792089237316195423570985008687907853269984665640564039457584007913129639935), -47)]
fn test_parse_ok_256(#[case] s: &str, #[case] _int: U256, #[case] exp: i64) {
    let dec = UD256::from_str(s).unwrap();
    assert_eq!(dec.decimal_digits(), _int);
    assert_eq!(dec.fractional_digits_count(), -exp);
}

#[rstest(::trace)]
#[case("115792089237316195423570985008687907853269984665640564039457584007913129639936")]
#[case("11579208923731619542357098500868790785326998466564056403945758400791312963993.6")]
#[case("1157920892373161954235709850086879078532699846656405640394575840079131296399351")]
#[case("115792089237316195423570985008687907853269984665640564039457584007913129639935.1")]
#[should_panic(expected = "(fastnum) number too large to fit in target type")]
fn test_parse_overflow_256(#[case] s: &str) {
    let _ = UD256::from_str(s).unwrap();
}
