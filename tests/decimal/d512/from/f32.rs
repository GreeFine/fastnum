use rstest::*;

use fastnum::{dec512, D512};

use crate::decimal::common::from::f32::{test_impl, test_impl_signed};

test_impl!(dec512, D512);
test_impl_signed!(dec512, D512);

#[rstest(::trace)]
#[case(f32::MAX, dec512!(340282346638528859811704183484516925440))]
#[case(f32::MIN_POSITIVE, dec512!(1.1754943508222875079687365372222456778186655567720875215087517062784172594547271728515625e-38))]
#[case(317e-40, dec512!(3.1700000098946435501119816090716154772221806896649747100732700841687651538425285480116144753992557525634765625E-38))]
#[case(2.35098744048e-38, dec512!(2.350987440475957123602109243087866394712812961308427354153308831195379018097479928428583662025630474090576171875E-38))]
#[case(2.3509889819e-38, dec512!(2.35098898190426788090088725919040801362055736959656341832065776397049129686767088287524529732763767242431640625E-38))]
fn test_from_f32_ok_512(#[case] n: f32, #[case] expected: D512) {
    let d = D512::try_from(n).unwrap();
    assert_eq!(d, expected);

    let n = f32::from_bits(n.to_bits() | (1 << 31));
    let d = D512::try_from(n).unwrap();
    assert_eq!(d, expected.neg());
}

#[rstest]
#[trace]
#[case(1.0e-40, dec512!(0.9999946101114759581525919052273499496042205269619191850412790687494327124262838424328947439789772033691406250e-40))]
#[case(1.0e-39, dec512!(1.00000021530533325742087560014568310926874564800968669110436609702256827159061458587530069053173065185546875000e-39))]
#[case(3.92E-39, dec512!(3.91999933059456489828739575494312783522406115751507460249208160269472102366083987590172910131514072418212890625E-39))]
#[case(1.40129846432e-45, dec512!(1.40129846432481707092372958328991613128026194187651577175706828388979108268586060148663818836212158203125E-45))]
#[case(-1e-42, dec512!(-1.0005271035279193886395429224690001177341070264998322610345467546973108330377044694614596664905548095703125e-42))]
fn test_from_f32_subnormal(#[case] n: f32, #[case] expected: D512) {
    assert!(n.is_subnormal());
    let d = D512::try_from(n).unwrap();
    assert_eq!(d, expected);
}
