use std::str::FromStr;

use criterion::{black_box, BenchmarkId, Criterion};

use bigdecimal::BigDecimal;
use fastnum::{dec128, D128};

pub fn vector(c: &mut Criterion) {

    mod temp {
        use bigdecimal::BigDecimal;
        use std::str::FromStr;
        
        pub fn test() {
            let pi = BigDecimal::from_str("3.1415926535897932384626433832795028841971693993751058209749445923078164062862089986280348253421170679821480865132823066470938446095505822317253594081284811174502841027019385211055596446229489549303819644288109756659334461284756482337867831652712019091456485669234603486104543266482133936072602491412737245870066063155881748815209209628292540917153643678925903600113305305488204665213841469519415116094330572703657595919530921861173819326117931051185480744623799627495673518857527248912279381830119491298336733624406566430860213949463952247371907021798609437027705392171762931767523846748184676694051320005681271452635608277857713427577896091736371787214684409012249534301465495853710507922796892589235420199561121290219608640344181598136297747713099605187072113499999983729780499510597317328160963185950244594553469083026425223082533446850352619311881710100031378387528865875332083814206171776691473035982534904287554687311595628638823537875937519577818577805321712268066130019278766111959092164201989").unwrap();
            let x = BigDecimal::from_str("180").unwrap();

            let res = pi / x;
            assert_eq!(format!("{:#?}", res), "".to_string());
        }
    }
    
    temp::test();
    
    let mut group = c.benchmark_group("Allocate");

    for size in [100, 500, 1000, 10000, 100000, 1000000] {
        group.bench_with_input(BenchmarkId::new("f64", size), &size, |b, size| {
            const N: f64 = 0.123_456_789_101_112_13;
            b.iter(|| black_box(vec![N; *size]))
        });

        group.bench_with_input(BenchmarkId::new("D128", size), &size, |b, size| {
            const N: D128 = dec128!(0.12345678910111213);
            b.iter(|| black_box(vec![N; *size]))
        });

        group.bench_with_input(BenchmarkId::new("BigDecimal", size), &size, |b, size| {
            let n = BigDecimal::from_str("0.12345678910111213").unwrap();
            b.iter(|| black_box(vec![n.clone(); *size]))
        });
    }
    group.finish();
}
